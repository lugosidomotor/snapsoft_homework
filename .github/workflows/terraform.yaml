name: Deploy/Destroy Terraform

on:
  workflow_dispatch:
    inputs:
      access-key-id:
        description: 'AWS Access Key ID'
        required: true
        type: string
      secret-access-key:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      terraform-action:
        description: 'Apply or Destroy'
        required: true
        type: choice
        options: 
        - apply
        - destroy
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: 'us-west-2'
      company:
        description: 'Company name'
        required: false
        type: string
        default: 'detectives'
      environment:
        description: 'Environment'
        required: false
        type: string
        default: 'dev'

jobs:
  terraform_apply:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        
    # Determine the current branch name
    - name: Set branch related envs
      id: getbranch
      run: |
        branch_name=$(git branch --show-current)
        echo "CURRENT_BRANCH=$branch_name" >> $GITHUB_ENV
        unique_suffix="lint-changes-$(date +'%Y%m%d%H%M%S')"
        echo BRANCH_NAME="$branch_name-$unique_suffix"  >> $GITHUB_ENV

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Specify the Node.js version

    - name: Install Node.js Dependencies
      run: |
        npm install pg  # Install required Node.js modules

    - name: Install Terraform
      run: |
        # Install the latest version of Terraform
        TERRAFORM_VERSION=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M '.current_version')
        wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
        unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ github.event.inputs.access-key-id }}
        aws-secret-access-key: ${{ github.event.inputs.secret-access-key }}
        aws-region: ${{ github.event.inputs.aws-region }}

    - name: Check if S3 State Bucket exists
      run: |
        bucket_name="${{ github.event.inputs.company }}-terraform-state-${{ github.event.inputs.environment }}"
        region="${{ github.event.inputs.aws-region }}"
        
        # Check if the bucket exists
        if aws s3api head-bucket --bucket "$bucket_name" --region "$region" 2>/dev/null; then
          echo "Bucket already exists: $bucket_name"
        else
          echo "Bucket does not exist. Creating $bucket_name..."
          # Create the bucket
          aws s3api create-bucket --bucket "$bucket_name" --region "$region" --create-bucket-configuration LocationConstraint="$region"
          echo "Bucket created: $bucket_name"
        fi
        
    - name: Check if S3 Lambda Code Bucket exists
      run: |
        bucket_name="${{ github.event.inputs.company }}-${{ github.event.inputs.environment }}-lambda-code-bucket"
        region="${{ github.event.inputs.aws-region }}"
        
        # Check if the bucket exists
        if aws s3api head-bucket --bucket "$bucket_name" --region "$region" 2>/dev/null; then
          echo "Bucket already exists: $bucket_name"
        else
          echo "Bucket does not exist. Creating $bucket_name..."
          # Create the bucket
          aws s3api create-bucket --bucket "$bucket_name" --region "$region" --create-bucket-configuration LocationConstraint="$region"
          echo "Bucket created: $bucket_name"
        fi

    - name: Terraform Init
      run: terraform init -backend-config="region=${{ github.event.inputs.aws-region }}"

    - name: Terraform Format
      run: terraform fmt

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Apply
      env:
        TF_INPUT: 0
      run: |
        terraform ${{ github.event.inputs.terraform-action }} -var="aws_region=${{ github.event.inputs.aws-region }}" -var="company=${{ github.event.inputs.company }}" -var="environment=${{ github.event.inputs.environment }}" -auto-approve
        
    - name: Set Outputs as Env Vars
      run: |
        echo "API_ENDPOINT=$(terraform output -raw api_gateway_endpoint)" >> $GITHUB_ENV
        echo "API_KEY=$(terraform output -raw api_key)" >> $GITHUB_ENV

    - name: Test API Endpoint
      run: |
        curl_command="curl -X POST -H 'Content-Type: application/json' -H 'x-api-key: ${{ env.API_KEY }}' -d '{\"message\": \"Example message\", \"target\": \"example.com\"}' ${{ env.API_ENDPOINT }}"
        echo "Executing: $curl_command"
        echo "$curl_command" >> $GITHUB_STEP_SUMMARY

    # Check if linting made any changes
    - name: Check for modified files
      id: git-check
      run: |
        git diff --exit-code || echo "##[set-output name=changed;]true"

    - name: Run the Action
      if: steps.git-check.outputs.changed == 'true'
      uses: devops-infra/action-commit-push@master
      with:
        github_token: "${{ secrets.GITHUB_TOKEN }}"
        add_timestamp: false
        commit_prefix: "[AUTO] "
        commit_message: "automated Terraform fmt fixes from the GitHub Actions workflow"
        force: false
        target_branch: ${{ env.BRANCH_NAME }}

    - name: Create Pull Request
      if: steps.git-check.outputs.changed == 'true'
      run: |
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
        gh pr create --base ${{ env.CURRENT_BRANCH }} --head ${{ env.BRANCH_NAME }} --title "Automated Terraform format for ${{ env.CURRENT_BRANCH }} branch" --body "This PR contains automated lint fixes for ${{ env.CURRENT_BRANCH }} branch"
